%\VignetteDepends{Rlpj}
%\VignetteIndexEntry{Introduction to the raster package}
%!\VignetteEncoding{UTF-8}
\documentclass{article}

\usepackage{natbib}
\usepackage{graphics}
\usepackage{amsmath}
\usepackage{indentfirst}
\usepackage{hanging}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}



\newcommand{\R}{{\normalfont\textsf{R }}{}}
\newcommand{\NA}{{\normalfont\textsf{NA }}{}}

\DeclareGraphicsExtensions{.png,.pdf,.jpg}

\begin{document}
\SweaveOpts{concordance=TRUE}

\SweaveOpts{png=TRUE, pdf=FALSE}

\SweaveOpts{resolution=100}
\SweaveOpts{keep.source=TRUE}

<<foo,include=FALSE,echo=FALSE>>=
options(width = 60)
foo <- packageDescription("Rlpj")
@

\title{Introduction to the 'Rlpj' package\\(version \Sexpr{foo$Version})}

\author{Ramiro Silveyra Gonzalez, Maurizio Bagnara, Florian Hartig}
\maketitle

\section{Introduction}

This vignette describes the \R package '\verb@Rlpj@'. LPJ is something


The \verb@LPJ@ package is thought to ease the use of LPJ in general and has emphasis on the parallelization of the LPJ-GUESS in High Computer Performance Environments (HPC). The package is a collection of tools that will allow you to create a parallel setup and run in parallel not only the LPJ model, but also the processing of the model outputs. The package can be also used for parallel run in personal computers.

In this vignette you will learn how to run LPJ in R using RLPJ. You will also prepare a parallel setup for running RLP in a cluster.


\section{Running LPJ in R}



The Rlpj package will help you to run LPJ-GUESS in parallel,  but first you will have to prepare your data, so that you can make use the of the package utilities. Specifically, Rlpj requires that \emph{i)} you have already compiled the LPJ model in your computer or home folder in the HPC, and that \emph{ii)}the existence of a directory where the outputs of the model will be saved, lets name it the Main Directory.


In the Main Directory, the following files must be available:

\begin{itemize}
\item  link to the model executable \hfill  guess / guesscmd.exe
\item  list of gridcells    \hfill gridlist.txt
\item  model template  (optional)            \hfill  global.ins
\item model template  (optional)       \hfill  global\_cru.ins or global\_cf.ins
\end{itemize}



The model templates are included within the package as part of the system data. They have been edited with some reference values, but you might want to change then. The function \emph{getTemplate} allows you to obtain the templates from package. To learn more about how to writing parameters in the template, check out the {\bf writeParameters}  function and the {\bf getParameterList}.



\section{Running LPJ in parallel}


Running the LPJ parallel involves two steps. First, to create a parallel setup ({\bf setupParallel}) function, and second, to actually run in parallel the model (runLPJ).  The parallelization requires the packages \verb@snow@ and if you aim at using a MPI cluster, also the \verb@Rmpi@  package.

The {\bf setupParallel} function will help you at creating a directory structure for storing your model outputs and arranging the model templates for each run. Calling the {\bf setupParallel}  returns a list object that contains all information needed to run the LPJ in parallel.

The {\bf runLPJ} function reads the setup parallel object and creates a cluster to which submits the model wrapper function with its respective parameters.

In MPI clusters you have to exit the cluster.


\section{An example}


Before calling the *setupParallel* function, we will prepare the input parameters for the function.  In this case, I want to test 20 different values for the *emax* parameter. Concerning the outputs, I am only interested in *aaet* and *lai* outputs.


Lets choose a mainDir and have a look at it. Remember that the mainDir is the folder in the directory structure for the parallel runs will be created. It should contain a link to your guess executable and file with list of gridcells.

<<Rlpj-1>>=
# clearing local environment
rm(list=ls())
# Loading the library
library(Rlpj)

# The main dir in this case is within the package
mainDir <- system.file("extdata", package = "Rlpj")
list.files(mainDir)
@

We want to use the global templates. This is not a problem because they are part of the package.
Since we are running this on a personal laptop, lets use a low number cores and create a SOCK cluster. Now that we  have prepared the variables, we can call the *setupParallel* function and build the directory structure.


<<Rlpj-1>>=
# Now, I specify which outputs I want process.
typeList <- c("aaet", "nuptake")

# Choosing the parameters
# Only modifying 1 parameter: emax.
# The complete list of parameters that can be modified can be found in the "data_raw/createInternalData.R"
# Chekc parameterList
parameterDefault <- getParameterList("europe")
parameterDefault[1:10]

parameterDefault <- list (run_emax = NULL)
# I want to test 20 different values for emax. I want therefore to run 20 time the LPJ
par <- seq(1,5, len = 20)
print (par)
# I create the list object with the parameters
parameterList <- vector("list", length(par))
for (i in 1:length(par)) {
  parameterDefault$run_emax <- par[i]
  parameterList[[i]] <- parameterDefault
}
print(parameterList[c(2:3)])

# We will be using only the cru data and run the model at 2 European locations
# as specified in the gridlist.txt file.
# Lets call the setupParallel
options(error=traceback)
setupObject <- setupLPJParallel(numCores= 3, clusterType = "SOCK", mainDir=mainDir)

# if we check object, we see that contains the information for creating the cluster
names(setupObject)
@



\section{References}











\end{document}
